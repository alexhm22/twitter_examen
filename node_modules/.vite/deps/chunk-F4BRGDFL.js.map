{
  "version": 3,
  "sources": ["../../@vaadin/component-base/src/slot-controller.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { FlattenedNodesObserver } from '@polymer/polymer/lib/utils/flattened-nodes-observer.js';\nimport { generateUniqueId } from './unique-id-utils.js';\n\n/**\n * A controller for providing content to slot element and observing changes.\n */\nexport class SlotController extends EventTarget {\n  /**\n   * Ensure that every instance has unique ID.\n   *\n   * @param {string} slotName\n   * @param {HTMLElement} host\n   * @return {string}\n   * @protected\n   */\n  static generateId(slotName, host) {\n    const prefix = slotName || 'default';\n    return `${prefix}-${host.localName}-${generateUniqueId()}`;\n  }\n\n  constructor(host, slotName, slotFactory, slotInitializer, useUniqueId) {\n    super();\n\n    this.host = host;\n    this.slotName = slotName;\n    this.slotFactory = slotFactory;\n    this.slotInitializer = slotInitializer;\n\n    // Only generate the default ID if requested by the controller.\n    if (useUniqueId) {\n      this.defaultId = SlotController.generateId(slotName, host);\n    }\n  }\n\n  hostConnected() {\n    if (!this.initialized) {\n      let node = this.getSlotChild();\n\n      if (!node) {\n        node = this.attachDefaultNode();\n      } else {\n        this.node = node;\n        this.initCustomNode(node);\n      }\n\n      this.initNode(node);\n\n      // TODO: Consider making this behavior opt-in to improve performance.\n      this.observe();\n\n      this.initialized = true;\n    }\n  }\n\n  /**\n   * Create and attach default node using the slot factory.\n   * @return {Node | undefined}\n   * @protected\n   */\n  attachDefaultNode() {\n    const { host, slotName, slotFactory } = this;\n\n    // Check if the node was created previously and if so, reuse it.\n    let node = this.defaultNode;\n\n    // Slot factory is optional, some slots don't have default content.\n    if (!node && slotFactory) {\n      node = slotFactory(host);\n      if (node instanceof Element) {\n        if (slotName !== '') {\n          node.setAttribute('slot', slotName);\n        }\n        this.node = node;\n        this.defaultNode = node;\n      }\n    }\n\n    if (node) {\n      host.appendChild(node);\n    }\n\n    return node;\n  }\n\n  /**\n   * Return a reference to the node managed by the controller.\n   * @return {Node}\n   */\n  getSlotChild() {\n    const { slotName } = this;\n    return Array.from(this.host.childNodes).find((node) => {\n      // Either an element (any slot) or a text node (only un-named slot).\n      return (\n        (node.nodeType === Node.ELEMENT_NODE && node.slot === slotName) ||\n        (node.nodeType === Node.TEXT_NODE && node.textContent.trim() && slotName === '')\n      );\n    });\n  }\n\n  /**\n   * @param {Node} node\n   * @protected\n   */\n  initNode(node) {\n    const { slotInitializer } = this;\n    // Don't try to bind `this` to initializer (normally it's arrow function).\n    // Instead, pass the host as a first argument to access component's state.\n    if (slotInitializer) {\n      slotInitializer(this.host, node);\n    }\n  }\n\n  /**\n   * Override to initialize the newly added custom node.\n   *\n   * @param {Node} _node\n   * @protected\n   */\n  initCustomNode(_node) {}\n\n  /**\n   * Override to teardown slotted node when it's removed.\n   *\n   * @param {Node} _node\n   * @protected\n   */\n  teardownNode(_node) {}\n\n  /**\n   * Setup the observer to manage slot content changes.\n   * @protected\n   */\n  observe() {\n    const { slotName } = this;\n    const selector = slotName === '' ? 'slot:not([name])' : `slot[name=${slotName}]`;\n    const slot = this.host.shadowRoot.querySelector(selector);\n\n    this.__slotObserver = new FlattenedNodesObserver(slot, (info) => {\n      // TODO: support default slot with multiple nodes (e.g. confirm-dialog)\n      const current = this.node;\n      const newNode = info.addedNodes.find((node) => node !== current);\n\n      if (info.removedNodes.length) {\n        info.removedNodes.forEach((node) => {\n          this.teardownNode(node);\n        });\n      }\n\n      if (newNode) {\n        // Custom node is added, remove the current one.\n        if (current && current.isConnected) {\n          this.host.removeChild(current);\n        }\n\n        this.node = newNode;\n\n        if (newNode !== this.defaultNode) {\n          this.initCustomNode(newNode);\n\n          this.initNode(newNode);\n        }\n      }\n    });\n  }\n}\n"],
  "mappings": ";;;;;;;;AAWO,IAAM,iBAAN,cAA6B,YAAY;AAAA,EAS9C,OAAO,WAAW,UAAU,MAAM;AAChC,UAAM,SAAS,YAAY;AAC3B,WAAO,GAAG,UAAU,KAAK,aAAa,iBAAiB;AAAA,EACzD;AAAA,EAEA,YAAY,MAAM,UAAU,aAAa,iBAAiB,aAAa;AACrE,UAAM;AAEN,SAAK,OAAO;AACZ,SAAK,WAAW;AAChB,SAAK,cAAc;AACnB,SAAK,kBAAkB;AAGvB,QAAI,aAAa;AACf,WAAK,YAAY,eAAe,WAAW,UAAU,IAAI;AAAA,IAC3D;AAAA,EACF;AAAA,EAEA,gBAAgB;AACd,QAAI,CAAC,KAAK,aAAa;AACrB,UAAI,OAAO,KAAK,aAAa;AAE7B,UAAI,CAAC,MAAM;AACT,eAAO,KAAK,kBAAkB;AAAA,MAChC,OAAO;AACL,aAAK,OAAO;AACZ,aAAK,eAAe,IAAI;AAAA,MAC1B;AAEA,WAAK,SAAS,IAAI;AAGlB,WAAK,QAAQ;AAEb,WAAK,cAAc;AAAA,IACrB;AAAA,EACF;AAAA,EAOA,oBAAoB;AAClB,UAAM,EAAE,MAAM,UAAU,YAAY,IAAI;AAGxC,QAAI,OAAO,KAAK;AAGhB,QAAI,CAAC,QAAQ,aAAa;AACxB,aAAO,YAAY,IAAI;AACvB,UAAI,gBAAgB,SAAS;AAC3B,YAAI,aAAa,IAAI;AACnB,eAAK,aAAa,QAAQ,QAAQ;AAAA,QACpC;AACA,aAAK,OAAO;AACZ,aAAK,cAAc;AAAA,MACrB;AAAA,IACF;AAEA,QAAI,MAAM;AACR,WAAK,YAAY,IAAI;AAAA,IACvB;AAEA,WAAO;AAAA,EACT;AAAA,EAMA,eAAe;AACb,UAAM,EAAE,SAAS,IAAI;AACrB,WAAO,MAAM,KAAK,KAAK,KAAK,UAAU,EAAE,KAAK,CAAC,SAAS;AAErD,aACG,KAAK,aAAa,KAAK,gBAAgB,KAAK,SAAS,YACrD,KAAK,aAAa,KAAK,aAAa,KAAK,YAAY,KAAK,KAAK,aAAa;AAAA,IAEjF,CAAC;AAAA,EACH;AAAA,EAMA,SAAS,MAAM;AACb,UAAM,EAAE,gBAAgB,IAAI;AAG5B,QAAI,iBAAiB;AACnB,sBAAgB,KAAK,MAAM,IAAI;AAAA,IACjC;AAAA,EACF;AAAA,EAQA,eAAe,OAAO;AAAA,EAAC;AAAA,EAQvB,aAAa,OAAO;AAAA,EAAC;AAAA,EAMrB,UAAU;AACR,UAAM,EAAE,SAAS,IAAI;AACrB,UAAM,WAAW,aAAa,KAAK,qBAAqB,aAAa;AACrE,UAAM,OAAO,KAAK,KAAK,WAAW,cAAc,QAAQ;AAExD,SAAK,iBAAiB,IAAI,uBAAuB,MAAM,CAAC,SAAS;AAE/D,YAAM,UAAU,KAAK;AACrB,YAAM,UAAU,KAAK,WAAW,KAAK,CAAC,SAAS,SAAS,OAAO;AAE/D,UAAI,KAAK,aAAa,QAAQ;AAC5B,aAAK,aAAa,QAAQ,CAAC,SAAS;AAClC,eAAK,aAAa,IAAI;AAAA,QACxB,CAAC;AAAA,MACH;AAEA,UAAI,SAAS;AAEX,YAAI,WAAW,QAAQ,aAAa;AAClC,eAAK,KAAK,YAAY,OAAO;AAAA,QAC/B;AAEA,aAAK,OAAO;AAEZ,YAAI,YAAY,KAAK,aAAa;AAChC,eAAK,eAAe,OAAO;AAE3B,eAAK,SAAS,OAAO;AAAA,QACvB;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AACF;",
  "names": []
}
