{
  "version": 3,
  "sources": ["../../@vaadin/accordion/src/vaadin-accordion.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2019 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { FlattenedNodesObserver } from '@polymer/polymer/lib/utils/flattened-nodes-observer.js';\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\nimport { KeyboardDirectionMixin } from '@vaadin/component-base/src/keyboard-direction-mixin.js';\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { AccordionPanel } from './vaadin-accordion-panel.js';\n\n/**\n * `<vaadin-accordion>` is a Web Component implementing accordion widget \u2014\n * a vertically stacked set of expandable panels. The component should be\n * used as a wrapper for two or more `<vaadin-accordion-panel>` components.\n *\n * Panel headings function as controls that enable users to open (expand)\n * or hide (collapse) their associated sections of content. The user can\n * toggle panels by mouse click, Enter and Space keys.\n *\n * Only one panel can be opened at a time, opening a new one forces\n * previous panel to close and hide its content.\n *\n * ```\n * <vaadin-accordion>\n *   <vaadin-accordion-panel>\n *     <div slot=\"summary\">Panel 1</div>\n *     This panel is opened, so the text is visible by default.\n *   </vaadin-accordion-panel>\n *   <vaadin-accordion-panel>\n *     <div slot=\"summary\">Panel 2</div>\n *     After opening this panel, the first one becomes closed.\n *   </vaadin-accordion-panel>\n * </vaadin-accordion>\n * ```\n *\n * ### Styling\n *\n * See the [`<vaadin-accordion-panel>`](#/elements/vaadin-accordion-panel)\n * documentation for the available state attributes and stylable shadow parts.\n *\n * **Note:** You can apply the theme to `<vaadin-accordion>` component itself,\n * especially by using the following CSS selector:\n *\n * ```\n * :host ::slotted(vaadin-accordion-panel) {\n *   margin-bottom: 5px;\n * }\n * ```\n *\n * See [Styling Components](https://vaadin.com/docs/latest/styling/custom-theme/styling-components) documentation.\n *\n * @fires {CustomEvent} items-changed - Fired when the `items` property changes.\n * @fires {CustomEvent} opened-changed - Fired when the `opened` property changes.\n *\n * @extends HTMLElement\n * @mixes ElementMixin\n * @mixes KeyboardDirectionMixin\n * @mixes ThemableMixin\n */\nclass Accordion extends KeyboardDirectionMixin(ThemableMixin(ElementMixin(PolymerElement))) {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n        }\n\n        :host([hidden]) {\n          display: none !important;\n        }\n      </style>\n      <slot></slot>\n    `;\n  }\n\n  static get is() {\n    return 'vaadin-accordion';\n  }\n\n  static get properties() {\n    return {\n      /**\n       * The index of currently opened panel. First panel is opened by\n       * default. Only one panel can be opened at the same time.\n       * Setting null or undefined closes all the accordion panels.\n       * @type {number}\n       */\n      opened: {\n        type: Number,\n        value: 0,\n        notify: true,\n        reflectToAttribute: true,\n      },\n\n      /**\n       * The list of `<vaadin-accordion-panel>` child elements.\n       * It is populated from the elements passed to the light DOM,\n       * and updated dynamically when adding or removing panels.\n       * @type {!Array<!AccordionPanel>}\n       */\n      items: {\n        type: Array,\n        readOnly: true,\n        notify: true,\n      },\n    };\n  }\n\n  static get observers() {\n    return ['_updateItems(items, opened)'];\n  }\n\n  constructor() {\n    super();\n    this._boundUpdateOpened = this._updateOpened.bind(this);\n  }\n\n  /**\n   * @protected\n   * @override\n   */\n  focus() {\n    if (this._observer) {\n      this._observer.flush();\n    }\n    super.focus();\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n\n    this._observer = new FlattenedNodesObserver(this, (info) => {\n      this._setItems(this._filterItems(Array.from(this.children)));\n\n      this._filterItems(info.addedNodes).forEach((el) => {\n        el.addEventListener('opened-changed', this._boundUpdateOpened);\n      });\n    });\n  }\n\n  /**\n   * Override method inherited from `KeyboardDirectionMixin`\n   * to use the stored list of accordion panels as items.\n   *\n   * @return {Element[]}\n   * @protected\n   * @override\n   */\n  _getItems() {\n    return this.items;\n  }\n\n  /**\n   * @param {!Array<!Element>} array\n   * @return {!Array<!AccordionPanel>}\n   * @protected\n   */\n  _filterItems(array) {\n    return array.filter((el) => el instanceof AccordionPanel);\n  }\n\n  /** @private */\n  _updateItems(items, opened) {\n    if (items) {\n      const itemToOpen = items[opened];\n      items.forEach((item) => {\n        item.opened = item === itemToOpen;\n      });\n    }\n  }\n\n  /**\n   * Override an event listener from `KeyboardMixin`\n   * to only handle details toggle buttons events.\n   *\n   * @param {!KeyboardEvent} event\n   * @protected\n   * @override\n   */\n  _onKeyDown(event) {\n    // Only check keyboard events on details toggle buttons\n    const item = event.composedPath()[0];\n    if (!this.items.some((el) => el.focusElement === item)) {\n      return;\n    }\n\n    super._onKeyDown(event);\n  }\n\n  /** @private */\n  _updateOpened(e) {\n    const target = this._filterItems(e.composedPath())[0];\n    const idx = this.items.indexOf(target);\n    if (e.detail.value) {\n      if (target.disabled || idx === -1) {\n        return;\n      }\n\n      this.opened = idx;\n    } else if (!this.items.some((item) => item.opened)) {\n      this.opened = null;\n    }\n  }\n}\n\ncustomElements.define(Accordion.is, Accordion);\n\nexport { Accordion };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6DA,IAAM,YAAN,cAAwB,uBAAuB,cAAc,aAAa,cAAc,CAAC,CAAC,EAAE;AAAA,EAC1F,WAAW,WAAW;AACpB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYT;AAAA,EAEA,WAAW,KAAK;AACd,WAAO;AAAA,EACT;AAAA,EAEA,WAAW,aAAa;AACtB,WAAO;AAAA,MAOL,QAAQ;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,oBAAoB;AAAA,MACtB;AAAA,MAQA,OAAO;AAAA,QACL,MAAM;AAAA,QACN,UAAU;AAAA,QACV,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,EACF;AAAA,EAEA,WAAW,YAAY;AACrB,WAAO,CAAC,6BAA6B;AAAA,EACvC;AAAA,EAEA,cAAc;AACZ,UAAM;AACN,SAAK,qBAAqB,KAAK,cAAc,KAAK,IAAI;AAAA,EACxD;AAAA,EAMA,QAAQ;AACN,QAAI,KAAK,WAAW;AAClB,WAAK,UAAU,MAAM;AAAA,IACvB;AACA,UAAM,MAAM;AAAA,EACd;AAAA,EAGA,QAAQ;AACN,UAAM,MAAM;AAEZ,SAAK,YAAY,IAAI,uBAAuB,MAAM,CAAC,SAAS;AAC1D,WAAK,UAAU,KAAK,aAAa,MAAM,KAAK,KAAK,QAAQ,CAAC,CAAC;AAE3D,WAAK,aAAa,KAAK,UAAU,EAAE,QAAQ,CAAC,OAAO;AACjD,WAAG,iBAAiB,kBAAkB,KAAK,kBAAkB;AAAA,MAC/D,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA,EAUA,YAAY;AACV,WAAO,KAAK;AAAA,EACd;AAAA,EAOA,aAAa,OAAO;AAClB,WAAO,MAAM,OAAO,CAAC,OAAO,cAAc,cAAc;AAAA,EAC1D;AAAA,EAGA,aAAa,OAAO,QAAQ;AAC1B,QAAI,OAAO;AACT,YAAM,aAAa,MAAM;AACzB,YAAM,QAAQ,CAAC,SAAS;AACtB,aAAK,SAAS,SAAS;AAAA,MACzB,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EAUA,WAAW,OAAO;AAEhB,UAAM,OAAO,MAAM,aAAa,EAAE;AAClC,QAAI,CAAC,KAAK,MAAM,KAAK,CAAC,OAAO,GAAG,iBAAiB,IAAI,GAAG;AACtD;AAAA,IACF;AAEA,UAAM,WAAW,KAAK;AAAA,EACxB;AAAA,EAGA,cAAc,GAAG;AACf,UAAM,SAAS,KAAK,aAAa,EAAE,aAAa,CAAC,EAAE;AACnD,UAAM,MAAM,KAAK,MAAM,QAAQ,MAAM;AACrC,QAAI,EAAE,OAAO,OAAO;AAClB,UAAI,OAAO,YAAY,QAAQ,IAAI;AACjC;AAAA,MACF;AAEA,WAAK,SAAS;AAAA,IAChB,WAAW,CAAC,KAAK,MAAM,KAAK,CAAC,SAAS,KAAK,MAAM,GAAG;AAClD,WAAK,SAAS;AAAA,IAChB;AAAA,EACF;AACF;AAEA,eAAe,OAAO,UAAU,IAAI,SAAS;",
  "names": []
}
