import {
  ComboBoxDataProviderMixin
} from "./chunk-F3OAG33L.js";
import {
  ComboBoxMixin
} from "./chunk-M4KRC6JC.js";
import "./chunk-CW2L4ERZ.js";
import "./chunk-KV2KG5GZ.js";
import "./chunk-LKZC625W.js";
import {
  PatternMixin
} from "./chunk-EVIJ22AM.js";
import {
  InputControlMixin,
  inputFieldShared as inputFieldShared2
} from "./chunk-SRU2LDDK.js";
import {
  inputFieldShared
} from "./chunk-PGG5QZ47.js";
import "./chunk-ETJMRR4D.js";
import "./chunk-3M57UG7S.js";
import "./chunk-CE2HX6X3.js";
import "./chunk-ECVMAJQB.js";
import "./chunk-KFLHWVCV.js";
import "./chunk-FEOKQDBU.js";
import "./chunk-6Z2FLVRD.js";
import "./chunk-ZR5NY57P.js";
import "./chunk-XAUSENF3.js";
import "./chunk-NUPKK76C.js";
import {
  InputController
} from "./chunk-MMRSOPPJ.js";
import {
  LabelledInputController
} from "./chunk-HNLXNRLU.js";
import "./chunk-LU3TFTVZ.js";
import "./chunk-CSTDY47U.js";
import "./chunk-KJAG6HMH.js";
import "./chunk-IOVQFHDT.js";
import "./chunk-L55YM4J4.js";
import "./chunk-3PUWOMHD.js";
import "./chunk-ZXFVDR5S.js";
import "./chunk-Q67J475U.js";
import "./chunk-LJ4MV4IY.js";
import "./chunk-VJGDHWCK.js";
import {
  TooltipController
} from "./chunk-L374UGML.js";
import "./chunk-F4BRGDFL.js";
import "./chunk-26L5GZ27.js";
import "./chunk-GA4D3JZK.js";
import {
  ElementMixin
} from "./chunk-35PYPRLR.js";
import "./chunk-WB77GQTL.js";
import "./chunk-LSFWBQOV.js";
import "./chunk-UMO66KPY.js";
import "./chunk-EF42WAVP.js";
import "./chunk-OFT7WUTJ.js";
import "./chunk-YELGMEWD.js";
import {
  ThemableMixin,
  registerStyles
} from "./chunk-VCK5WHZR.js";
import "./chunk-RTIK5DCO.js";
import "./chunk-VUWTYCVF.js";
import {
  css
} from "./chunk-KW5WBOXY.js";
import "./chunk-L65BUNLZ.js";
import "./chunk-CQH3N2QY.js";
import "./chunk-UMTV3SEQ.js";
import "./chunk-LQ5QREVC.js";
import "./chunk-2MM5UIAK.js";
import {
  PolymerElement
} from "./chunk-BK2NTPF4.js";
import "./chunk-A5QYNKPK.js";
import "./chunk-ZNZEAP57.js";
import "./chunk-54PPSA5Z.js";
import {
  html
} from "./chunk-BPZOCPE6.js";
import "./chunk-CJPRR7ZF.js";

// node_modules/@vaadin/combo-box/theme/lumo/vaadin-combo-box-styles.js
var comboBox = css`
  :host {
    outline: none;
  }

  [part='toggle-button']::before {
    content: var(--lumo-icons-dropdown);
  }
`;
registerStyles("vaadin-combo-box", [inputFieldShared, comboBox], { moduleId: "lumo-combo-box" });

// node_modules/@vaadin/combo-box/src/vaadin-combo-box.js
registerStyles("vaadin-combo-box", inputFieldShared2, { moduleId: "vaadin-combo-box-styles" });
var ComboBox = class extends ComboBoxDataProviderMixin(
  ComboBoxMixin(PatternMixin(InputControlMixin(ThemableMixin(ElementMixin(PolymerElement)))))
) {
  static get is() {
    return "vaadin-combo-box";
  }
  static get template() {
    return html`
      <style>
        :host([opened]) {
          pointer-events: auto;
        }
      </style>

      <div class="vaadin-combo-box-container">
        <div part="label">
          <slot name="label"></slot>
          <span part="required-indicator" aria-hidden="true" on-click="focus"></span>
        </div>

        <vaadin-input-container
          part="input-field"
          readonly="[[readonly]]"
          disabled="[[disabled]]"
          invalid="[[invalid]]"
          theme$="[[_theme]]"
        >
          <slot name="prefix" slot="prefix"></slot>
          <slot name="input"></slot>
          <div id="clearButton" part="clear-button" slot="suffix" aria-hidden="true"></div>
          <div id="toggleButton" part="toggle-button" slot="suffix" aria-hidden="true"></div>
        </vaadin-input-container>

        <div part="helper-text">
          <slot name="helper"></slot>
        </div>

        <div part="error-message">
          <slot name="error-message"></slot>
        </div>
      </div>

      <vaadin-combo-box-overlay
        id="overlay"
        opened="[[_overlayOpened]]"
        loading$="[[loading]]"
        theme$="[[_theme]]"
        position-target="[[_positionTarget]]"
        no-vertical-overlap
        restore-focus-node="[[inputElement]]"
      ></vaadin-combo-box-overlay>

      <slot name="tooltip"></slot>
    `;
  }
  static get properties() {
    return {
      _positionTarget: {
        type: Object
      }
    };
  }
  get clearElement() {
    return this.$.clearButton;
  }
  ready() {
    super.ready();
    this.addController(
      new InputController(this, (input) => {
        this._setInputElement(input);
        this._setFocusElement(input);
        this.stateTarget = input;
        this.ariaTarget = input;
      })
    );
    this.addController(new LabelledInputController(this.inputElement, this._labelController));
    this._tooltipController = new TooltipController(this);
    this.addController(this._tooltipController);
    this._tooltipController.setPosition("top");
    this._tooltipController.setShouldShow((target) => !target.opened);
    this._positionTarget = this.shadowRoot.querySelector('[part="input-field"]');
    this._toggleElement = this.$.toggleButton;
  }
  _setFocused(focused) {
    super._setFocused(focused);
    if (!focused) {
      this.validate();
    }
  }
  _shouldRemoveFocus(event) {
    if (event.relatedTarget === this.$.overlay) {
      event.composedPath()[0].focus();
      return false;
    }
    return true;
  }
  _onClearButtonClick(event) {
    event.stopPropagation();
    this._handleClearButtonClick(event);
  }
  _onHostClick(event) {
    const path = event.composedPath();
    if (path.includes(this._labelNode) || path.includes(this._positionTarget)) {
      super._onHostClick(event);
    }
  }
};
customElements.define(ComboBox.is, ComboBox);
/**
 * @license
 * Copyright (c) 2015 - 2022 Vaadin Ltd.
 * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
 */
//# sourceMappingURL=@vaadin_combo-box_theme_lumo_vaadin-combo-box__js.js.map
