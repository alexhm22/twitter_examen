import {
  Checkbox
} from "./chunk-6L4CSIJ5.js";
import "./chunk-7H3BRWAV.js";
import {
  FieldMixin,
  helper,
  requiredField
} from "./chunk-NUPKK76C.js";
import "./chunk-MMRSOPPJ.js";
import "./chunk-HNLXNRLU.js";
import "./chunk-LU3TFTVZ.js";
import "./chunk-CSTDY47U.js";
import "./chunk-KJAG6HMH.js";
import "./chunk-IOVQFHDT.js";
import "./chunk-L55YM4J4.js";
import "./chunk-3PUWOMHD.js";
import "./chunk-IWC67P3I.js";
import "./chunk-KXXAFB6L.js";
import {
  DisabledMixin
} from "./chunk-ZXFVDR5S.js";
import "./chunk-Q67J475U.js";
import {
  FocusMixin
} from "./chunk-LJ4MV4IY.js";
import "./chunk-VJGDHWCK.js";
import {
  TooltipController
} from "./chunk-L374UGML.js";
import "./chunk-F4BRGDFL.js";
import "./chunk-26L5GZ27.js";
import "./chunk-GA4D3JZK.js";
import {
  ElementMixin
} from "./chunk-35PYPRLR.js";
import "./chunk-WB77GQTL.js";
import "./chunk-LSFWBQOV.js";
import "./chunk-UMO66KPY.js";
import "./chunk-EF42WAVP.js";
import "./chunk-OFT7WUTJ.js";
import "./chunk-YELGMEWD.js";
import {
  ThemableMixin,
  registerStyles
} from "./chunk-VCK5WHZR.js";
import "./chunk-RTIK5DCO.js";
import "./chunk-VUWTYCVF.js";
import {
  css
} from "./chunk-KW5WBOXY.js";
import "./chunk-L65BUNLZ.js";
import "./chunk-CQH3N2QY.js";
import {
  FlattenedNodesObserver
} from "./chunk-LQ5QREVC.js";
import {
  PolymerElement
} from "./chunk-BK2NTPF4.js";
import "./chunk-A5QYNKPK.js";
import "./chunk-ZNZEAP57.js";
import "./chunk-54PPSA5Z.js";
import {
  html
} from "./chunk-BPZOCPE6.js";
import "./chunk-CJPRR7ZF.js";

// node_modules/@vaadin/checkbox-group/theme/lumo/vaadin-checkbox-group-styles.js
var checkboxGroup = css`
  :host {
    color: var(--lumo-body-text-color);
    font-size: var(--lumo-font-size-m);
    font-family: var(--lumo-font-family);
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    -webkit-tap-highlight-color: transparent;
    padding: var(--lumo-space-xs) 0;
  }

  :host::before {
    /* Effective height of vaadin-checkbox */
    height: var(--lumo-size-s);
    box-sizing: border-box;
    display: inline-flex;
    align-items: center;
  }

  :host([theme~='vertical']) [part='group-field'] {
    display: flex;
    flex-direction: column;
  }

  :host([disabled]) [part='label'] {
    color: var(--lumo-disabled-text-color);
    -webkit-text-fill-color: var(--lumo-disabled-text-color);
  }

  :host([focused]:not([disabled])) [part='label'] {
    color: var(--lumo-primary-text-color);
  }

  :host(:hover:not([disabled]):not([focused])) [part='label'],
  :host(:hover:not([disabled]):not([focused])) [part='helper-text'] {
    color: var(--lumo-body-text-color);
  }

  /* Touch device adjustment */
  @media (pointer: coarse) {
    :host(:hover:not([disabled]):not([focused])) [part='label'] {
      color: var(--lumo-secondary-text-color);
    }
  }
`;
registerStyles("vaadin-checkbox-group", [requiredField, helper, checkboxGroup], {
  moduleId: "lumo-checkbox-group"
});

// node_modules/@vaadin/checkbox-group/src/vaadin-checkbox-group.js
var CheckboxGroup = class extends FieldMixin(FocusMixin(DisabledMixin(ElementMixin(ThemableMixin(PolymerElement))))) {
  static get is() {
    return "vaadin-checkbox-group";
  }
  static get template() {
    return html`
      <style>
        :host {
          display: inline-flex;
        }

        :host::before {
          content: '\\2003';
          width: 0;
          display: inline-block;
        }

        :host([hidden]) {
          display: none !important;
        }

        .vaadin-group-field-container {
          display: flex;
          flex-direction: column;
          width: 100%;
        }

        :host(:not([has-label])) [part='label'] {
          display: none;
        }
      </style>

      <div class="vaadin-group-field-container">
        <div part="label">
          <slot name="label"></slot>
          <span part="required-indicator" aria-hidden="true"></span>
        </div>

        <div part="group-field">
          <slot></slot>
        </div>

        <div part="helper-text">
          <slot name="helper"></slot>
        </div>

        <div part="error-message">
          <slot name="error-message"></slot>
        </div>
      </div>

      <slot name="tooltip"></slot>
    `;
  }
  static get properties() {
    return {
      value: {
        type: Array,
        value: () => [],
        notify: true,
        observer: "__valueChanged"
      }
    };
  }
  constructor() {
    super();
    this.__registerCheckbox = this.__registerCheckbox.bind(this);
    this.__unregisterCheckbox = this.__unregisterCheckbox.bind(this);
    this.__onCheckboxCheckedChanged = this.__onCheckboxCheckedChanged.bind(this);
  }
  ready() {
    super.ready();
    this.ariaTarget = this;
    this.setAttribute("role", "group");
    this._observer = new FlattenedNodesObserver(this, ({ addedNodes, removedNodes }) => {
      const addedCheckboxes = this.__filterCheckboxes(addedNodes);
      const removedCheckboxes = this.__filterCheckboxes(removedNodes);
      addedCheckboxes.forEach(this.__registerCheckbox);
      removedCheckboxes.forEach(this.__unregisterCheckbox);
      this.__warnOfCheckboxesWithoutValue(addedCheckboxes);
    });
    this._tooltipController = new TooltipController(this);
    this.addController(this._tooltipController);
  }
  checkValidity() {
    return !this.required || this.value.length > 0;
  }
  __filterCheckboxes(nodes) {
    return nodes.filter((child) => child instanceof Checkbox);
  }
  get __checkboxes() {
    return this.__filterCheckboxes([...this.children]);
  }
  __warnOfCheckboxesWithoutValue(checkboxes) {
    const hasCheckboxesWithoutValue = checkboxes.some((checkbox) => {
      const { value } = checkbox;
      return !checkbox.hasAttribute("value") && (!value || value === "on");
    });
    if (hasCheckboxesWithoutValue) {
      console.warn("Please provide the value attribute to all the checkboxes inside the checkbox group.");
    }
  }
  __registerCheckbox(checkbox) {
    checkbox.addEventListener("checked-changed", this.__onCheckboxCheckedChanged);
    if (this.disabled) {
      checkbox.disabled = true;
    }
    if (checkbox.checked) {
      this.__addCheckboxToValue(checkbox.value);
    } else if (this.value.includes(checkbox.value)) {
      checkbox.checked = true;
    }
  }
  __unregisterCheckbox(checkbox) {
    checkbox.removeEventListener("checked-changed", this.__onCheckboxCheckedChanged);
    if (checkbox.checked) {
      this.__removeCheckboxFromValue(checkbox.value);
    }
  }
  _disabledChanged(newValue, oldValue) {
    super._disabledChanged(newValue, oldValue);
    if (!newValue && oldValue === void 0) {
      return;
    }
    if (oldValue !== newValue) {
      this.__checkboxes.forEach((checkbox) => {
        checkbox.disabled = newValue;
      });
    }
  }
  __addCheckboxToValue(value) {
    if (!this.value.includes(value)) {
      this.value = [...this.value, value];
    }
  }
  __removeCheckboxFromValue(value) {
    if (this.value.includes(value)) {
      this.value = this.value.filter((v) => v !== value);
    }
  }
  __onCheckboxCheckedChanged(event) {
    const checkbox = event.target;
    if (checkbox.checked) {
      this.__addCheckboxToValue(checkbox.value);
    } else {
      this.__removeCheckboxFromValue(checkbox.value);
    }
  }
  __valueChanged(value, oldValue) {
    if (value.length === 0 && oldValue === void 0) {
      return;
    }
    this.toggleAttribute("has-value", value.length > 0);
    this.__checkboxes.forEach((checkbox) => {
      checkbox.checked = value.includes(checkbox.value);
    });
    if (oldValue !== void 0) {
      this.validate();
    }
  }
  _shouldRemoveFocus(event) {
    return !this.contains(event.relatedTarget);
  }
  _setFocused(focused) {
    super._setFocused(focused);
    if (!focused) {
      this.validate();
    }
  }
};
customElements.define(CheckboxGroup.is, CheckboxGroup);
/**
 * @license
 * Copyright (c) 2018 - 2022 Vaadin Ltd.
 * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
 */
//# sourceMappingURL=@vaadin_checkbox-group_theme_lumo_vaadin-checkbox-group__js.js.map
