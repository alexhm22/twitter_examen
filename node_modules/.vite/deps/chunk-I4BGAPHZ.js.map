{
  "version": 3,
  "sources": ["../../@vaadin/grid/src/vaadin-grid-data-provider-mixin.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2016 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { timeOut } from '@vaadin/component-base/src/async.js';\nimport { Debouncer } from '@vaadin/component-base/src/debounce.js';\n\n/**\n * @private\n */\nexport const ItemCache = class ItemCache {\n  /**\n   * @param {!HTMLElement} grid\n   * @param {!ItemCache | undefined} parentCache\n   * @param {!GridItem | undefined} parentItem\n   */\n  constructor(grid, parentCache, parentItem) {\n    /** @type {!HTMLElement} */\n    this.grid = grid;\n    /** @type {!ItemCache | undefined} */\n    this.parentCache = parentCache;\n    /** @type {!GridItem | undefined} */\n    this.parentItem = parentItem;\n    /** @type {object} */\n    this.itemCaches = {};\n    /** @type {object} */\n    this.items = {};\n    /** @type {number} */\n    this.effectiveSize = 0;\n    /** @type {number} */\n    this.size = 0;\n    /** @type {object} */\n    this.pendingRequests = {};\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isLoading() {\n    return Boolean(\n      Object.keys(this.pendingRequests).length ||\n        Object.keys(this.itemCaches).filter((index) => {\n          return this.itemCaches[index].isLoading();\n        })[0],\n    );\n  }\n\n  /**\n   * @param {number} index\n   * @return {!GridItem | undefined}\n   */\n  getItemForIndex(index) {\n    const { cache, scaledIndex } = this.getCacheAndIndex(index);\n    return cache.items[scaledIndex];\n  }\n\n  updateSize() {\n    this.effectiveSize =\n      !this.parentItem || this.grid._isExpanded(this.parentItem)\n        ? this.size +\n          Object.keys(this.itemCaches).reduce((prev, curr) => {\n            const subCache = this.itemCaches[curr];\n            subCache.updateSize();\n            return prev + subCache.effectiveSize;\n          }, 0)\n        : 0;\n  }\n\n  /**\n   * @param {number} scaledIndex\n   */\n  ensureSubCacheForScaledIndex(scaledIndex) {\n    if (!this.itemCaches[scaledIndex]) {\n      const subCache = new ItemCache(this.grid, this, this.items[scaledIndex]);\n      this.itemCaches[scaledIndex] = subCache;\n      this.grid._loadPage(0, subCache);\n    }\n  }\n\n  /**\n   * @param {number} index\n   * @return {{cache: !ItemCache, scaledIndex: number}}\n   */\n  getCacheAndIndex(index) {\n    let thisLevelIndex = index;\n    const keys = Object.keys(this.itemCaches);\n    for (let i = 0; i < keys.length; i++) {\n      const expandedIndex = Number(keys[i]);\n      const subCache = this.itemCaches[expandedIndex];\n      if (thisLevelIndex <= expandedIndex) {\n        return { cache: this, scaledIndex: thisLevelIndex };\n      } else if (thisLevelIndex <= expandedIndex + subCache.effectiveSize) {\n        return subCache.getCacheAndIndex(thisLevelIndex - expandedIndex - 1);\n      }\n      thisLevelIndex -= subCache.effectiveSize;\n    }\n    return { cache: this, scaledIndex: thisLevelIndex };\n  }\n};\n\n/**\n * @polymerMixin\n */\nexport const DataProviderMixin = (superClass) =>\n  class DataProviderMixin extends superClass {\n    static get properties() {\n      return {\n        /**\n         * The number of root-level items in the grid.\n         * @attr {number} size\n         * @type {number}\n         */\n        size: {\n          type: Number,\n          notify: true,\n        },\n\n        /**\n         * Number of items fetched at a time from the dataprovider.\n         * @attr {number} page-size\n         * @type {number}\n         */\n        pageSize: {\n          type: Number,\n          value: 50,\n          observer: '_pageSizeChanged',\n        },\n\n        /**\n         * Function that provides items lazily. Receives arguments `params`, `callback`\n         *\n         * `params.page` Requested page index\n         *\n         * `params.pageSize` Current page size\n         *\n         * `params.filters` Currently applied filters\n         *\n         * `params.sortOrders` Currently applied sorting orders\n         *\n         * `params.parentItem` When tree is used, and sublevel items\n         * are requested, reference to parent item of the requested sublevel.\n         * Otherwise `undefined`.\n         *\n         * `callback(items, size)` Callback function with arguments:\n         *   - `items` Current page of items\n         *   - `size` Total number of items. When tree sublevel items\n         *     are requested, total number of items in the requested sublevel.\n         *     Optional when tree is not used, required for tree.\n         *\n         * @type {GridDataProvider | null | undefined}\n         */\n        dataProvider: {\n          type: Object,\n          notify: true,\n          observer: '_dataProviderChanged',\n        },\n\n        /**\n         * `true` while data is being requested from the data provider.\n         */\n        loading: {\n          type: Boolean,\n          notify: true,\n          readOnly: true,\n          reflectToAttribute: true,\n        },\n\n        /**\n         * @type {!ItemCache}\n         * @protected\n         */\n        _cache: {\n          type: Object,\n          value() {\n            const cache = new ItemCache(this);\n            return cache;\n          },\n        },\n\n        /**\n         * @protected\n         */\n        _hasData: {\n          type: Boolean,\n          value: false,\n        },\n\n        /**\n         * Path to an item sub-property that indicates whether the item has child items.\n         * @attr {string} item-has-children-path\n         */\n        itemHasChildrenPath: {\n          type: String,\n          value: 'children',\n        },\n\n        /**\n         * Path to an item sub-property that identifies the item.\n         * @attr {string} item-id-path\n         */\n        itemIdPath: {\n          type: String,\n          value: null,\n        },\n\n        /**\n         * An array that contains the expanded items.\n         * @type {!Array<!GridItem>}\n         */\n        expandedItems: {\n          type: Object,\n          notify: true,\n          value: () => [],\n        },\n\n        /**\n         * @private\n         */\n        __expandedKeys: {\n          type: Object,\n          computed: '__computeExpandedKeys(itemIdPath, expandedItems.*)',\n        },\n      };\n    }\n\n    static get observers() {\n      return ['_sizeChanged(size)', '_expandedItemsChanged(expandedItems.*)'];\n    }\n\n    /** @private */\n    _sizeChanged(size) {\n      const delta = size - this._cache.size;\n      this._cache.size += delta;\n      this._cache.effectiveSize += delta;\n      this._effectiveSize = this._cache.effectiveSize;\n    }\n\n    /**\n     * @param {number} index\n     * @param {HTMLElement} el\n     * @protected\n     */\n    _getItem(index, el) {\n      if (index >= this._effectiveSize) {\n        return;\n      }\n\n      el.index = index;\n      const { cache, scaledIndex } = this._cache.getCacheAndIndex(index);\n      const item = cache.items[scaledIndex];\n      if (item) {\n        el.toggleAttribute('loading', false);\n        this._updateItem(el, item);\n        if (this._isExpanded(item)) {\n          cache.ensureSubCacheForScaledIndex(scaledIndex);\n        }\n      } else {\n        el.toggleAttribute('loading', true);\n        this._loadPage(this._getPageForIndex(scaledIndex), cache);\n      }\n    }\n\n    /**\n     * Returns a value that identifies the item. Uses `itemIdPath` if available.\n     * Can be customized by overriding.\n     * @param {!GridItem} item\n     * @return {!GridItem | !unknown}\n     */\n    getItemId(item) {\n      return this.itemIdPath ? this.get(this.itemIdPath, item) : item;\n    }\n\n    /**\n     * @param {!GridItem} item\n     * @return {boolean}\n     * @protected\n     */\n    _isExpanded(item) {\n      return this.__expandedKeys.has(this.getItemId(item));\n    }\n\n    /** @private */\n    _expandedItemsChanged() {\n      this._cache.updateSize();\n      this._effectiveSize = this._cache.effectiveSize;\n      this.__updateVisibleRows();\n    }\n\n    /** @private */\n    __computeExpandedKeys(itemIdPath, expandedItems) {\n      const expanded = expandedItems.base || [];\n      const expandedKeys = new Set();\n      expanded.forEach((item) => {\n        expandedKeys.add(this.getItemId(item));\n      });\n\n      return expandedKeys;\n    }\n\n    /**\n     * Expands the given item tree.\n     * @param {!GridItem} item\n     */\n    expandItem(item) {\n      if (!this._isExpanded(item)) {\n        this.expandedItems = [...this.expandedItems, item];\n      }\n    }\n\n    /**\n     * Collapses the given item tree.\n     * @param {!GridItem} item\n     */\n    collapseItem(item) {\n      if (this._isExpanded(item)) {\n        this.expandedItems = this.expandedItems.filter((i) => !this._itemsEqual(i, item));\n      }\n    }\n\n    /**\n     * @param {number} index\n     * @return {number}\n     * @protected\n     */\n    _getIndexLevel(index) {\n      let { cache } = this._cache.getCacheAndIndex(index);\n      let level = 0;\n      while (cache.parentCache) {\n        cache = cache.parentCache;\n        level += 1;\n      }\n      return level;\n    }\n\n    /**\n     * @param {number} page\n     * @param {ItemCache} cache\n     * @protected\n     */\n    _loadPage(page, cache) {\n      // Make sure same page isn't requested multiple times.\n      if (!cache.pendingRequests[page] && this.dataProvider) {\n        this._setLoading(true);\n        cache.pendingRequests[page] = true;\n        const params = {\n          page,\n          pageSize: this.pageSize,\n          sortOrders: this._mapSorters(),\n          filters: this._mapFilters(),\n          parentItem: cache.parentItem,\n        };\n\n        this.dataProvider(params, (items, size) => {\n          if (size !== undefined) {\n            cache.size = size;\n          } else if (params.parentItem) {\n            cache.size = items.length;\n          }\n\n          const currentItems = Array.from(this.$.items.children).map((row) => row._item);\n\n          // Populate the cache with new items\n          items.forEach((item, itemsIndex) => {\n            const itemIndex = page * this.pageSize + itemsIndex;\n            cache.items[itemIndex] = item;\n            if (this._isExpanded(item) && currentItems.indexOf(item) > -1) {\n              // Force synchronous data request for expanded item sub-cache\n              cache.ensureSubCacheForScaledIndex(itemIndex);\n            }\n          });\n\n          this._hasData = true;\n\n          delete cache.pendingRequests[page];\n\n          this._debouncerApplyCachedData = Debouncer.debounce(this._debouncerApplyCachedData, timeOut.after(0), () => {\n            this._setLoading(false);\n            this._cache.updateSize();\n            this._effectiveSize = this._cache.effectiveSize;\n\n            Array.from(this.$.items.children)\n              .filter((row) => !row.hidden)\n              .forEach((row) => {\n                const cachedItem = this._cache.getItemForIndex(row.index);\n                if (cachedItem) {\n                  this._getItem(row.index, row);\n                }\n              });\n\n            this.__scrollToPendingIndex();\n          });\n\n          if (!this._cache.isLoading()) {\n            this._debouncerApplyCachedData.flush();\n          }\n\n          this.__itemsReceived();\n        });\n      }\n    }\n\n    /**\n     * @param {number} index\n     * @return {number}\n     * @private\n     */\n    _getPageForIndex(index) {\n      return Math.floor(index / this.pageSize);\n    }\n\n    /**\n     * Clears the cached pages and reloads data from dataprovider when needed.\n     */\n    clearCache() {\n      this._cache = new ItemCache(this);\n      this._cache.size = this.size || 0;\n      this._cache.updateSize();\n      this._hasData = false;\n      this.__updateVisibleRows();\n\n      if (!this._effectiveSize) {\n        this._loadPage(0, this._cache);\n      }\n    }\n\n    /** @private */\n    _pageSizeChanged(pageSize, oldPageSize) {\n      if (oldPageSize !== undefined && pageSize !== oldPageSize) {\n        this.clearCache();\n      }\n    }\n\n    /** @protected */\n    _checkSize() {\n      if (this.size === undefined && this._effectiveSize === 0) {\n        console.warn(\n          'The <vaadin-grid> needs the total number of items' +\n            ' in order to display rows. Set the total number of items' +\n            ' to the `size` property, or provide the total number of items' +\n            ' in the second argument of the `dataProvider`\u2019s `callback` call.',\n        );\n      }\n    }\n\n    /** @private */\n    _dataProviderChanged(dataProvider, oldDataProvider) {\n      if (oldDataProvider !== undefined) {\n        this.clearCache();\n      }\n\n      this._ensureFirstPageLoaded();\n\n      this._debouncerCheckSize = Debouncer.debounce(\n        this._debouncerCheckSize,\n        timeOut.after(2000),\n        this._checkSize.bind(this),\n      );\n    }\n\n    /** @protected */\n    _ensureFirstPageLoaded() {\n      if (!this._hasData) {\n        // Load data before adding rows to make sure they have content when\n        // rendered for the first time.\n        this._loadPage(0, this._cache);\n      }\n    }\n\n    /**\n     * @param {!GridItem} item1\n     * @param {!GridItem} item2\n     * @return {boolean}\n     * @protected\n     */\n    _itemsEqual(item1, item2) {\n      return this.getItemId(item1) === this.getItemId(item2);\n    }\n\n    /**\n     * @param {!GridItem} item\n     * @param {!Array<!GridItem>} array\n     * @return {number}\n     * @protected\n     */\n    _getItemIndexInArray(item, array) {\n      let result = -1;\n      array.forEach((i, idx) => {\n        if (this._itemsEqual(i, item)) {\n          result = idx;\n        }\n      });\n      return result;\n    }\n\n    scrollToIndex(index) {\n      super.scrollToIndex(index);\n      if (!isNaN(index) && (this._cache.isLoading() || !this.clientHeight)) {\n        this.__pendingScrollToIndex = index;\n      }\n    }\n\n    /** @private */\n    __scrollToPendingIndex() {\n      if (this.__pendingScrollToIndex && this.$.items.children.length) {\n        const index = this.__pendingScrollToIndex;\n        delete this.__pendingScrollToIndex;\n        this.scrollToIndex(index);\n      }\n    }\n\n    /**\n     * Fired when the `expandedItems` property changes.\n     *\n     * @event expanded-items-changed\n     */\n\n    /**\n     * Fired when the `loading` property changes.\n     *\n     * @event loading-changed\n     */\n  };\n"],
  "mappings": "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",
  "names": ["ItemCache"]
}
