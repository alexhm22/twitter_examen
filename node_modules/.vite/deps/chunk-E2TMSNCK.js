import {
  KeyboardMixin
} from "./chunk-Q67J475U.js";
import {
  isElementFocused,
  isElementHidden
} from "./chunk-OFT7WUTJ.js";

// node_modules/@vaadin/component-base/src/keyboard-direction-mixin.js
var KeyboardDirectionMixin = (superclass) => class KeyboardDirectionMixinClass extends KeyboardMixin(superclass) {
  focus() {
    const items = this._getItems();
    if (Array.isArray(items)) {
      const idx = this._getAvailableIndex(items, 0, null, (item) => !isElementHidden(item));
      if (idx >= 0) {
        items[idx].focus();
      }
    }
  }
  get focused() {
    return (this._getItems() || []).find(isElementFocused);
  }
  get _vertical() {
    return true;
  }
  _getItems() {
    return Array.from(this.children);
  }
  _onKeyDown(event) {
    super._onKeyDown(event);
    if (event.metaKey || event.ctrlKey) {
      return;
    }
    const { key } = event;
    const items = this._getItems() || [];
    const currentIdx = items.indexOf(this.focused);
    let idx;
    let increment;
    const isRTL = !this._vertical && this.getAttribute("dir") === "rtl";
    const dirIncrement = isRTL ? -1 : 1;
    if (this.__isPrevKey(key)) {
      increment = -dirIncrement;
      idx = currentIdx - dirIncrement;
    } else if (this.__isNextKey(key)) {
      increment = dirIncrement;
      idx = currentIdx + dirIncrement;
    } else if (key === "Home") {
      increment = 1;
      idx = 0;
    } else if (key === "End") {
      increment = -1;
      idx = items.length - 1;
    }
    idx = this._getAvailableIndex(items, idx, increment, (item) => !isElementHidden(item));
    if (idx >= 0) {
      event.preventDefault();
      this._focus(idx, true);
    }
  }
  __isPrevKey(key) {
    return this._vertical ? key === "ArrowUp" : key === "ArrowLeft";
  }
  __isNextKey(key) {
    return this._vertical ? key === "ArrowDown" : key === "ArrowRight";
  }
  _focus(index, navigating = false) {
    const items = this._getItems();
    this._focusItem(items[index], navigating);
  }
  _focusItem(item) {
    if (item) {
      item.focus();
      item.setAttribute("focus-ring", "");
    }
  }
  _getAvailableIndex(items, index, increment, condition) {
    const totalItems = items.length;
    let idx = index;
    for (let i = 0; typeof idx === "number" && i < totalItems; i += 1, idx += increment || 1) {
      if (idx < 0) {
        idx = totalItems - 1;
      } else if (idx >= totalItems) {
        idx = 0;
      }
      const item = items[idx];
      if (!item.hasAttribute("disabled") && this.__isMatchingItem(item, condition)) {
        return idx;
      }
    }
    return -1;
  }
  __isMatchingItem(item, condition) {
    return typeof condition === "function" ? condition(item) : true;
  }
};

export {
  KeyboardDirectionMixin
};
/**
 * @license
 * Copyright (c) 2022 Vaadin Ltd.
 * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
 */
//# sourceMappingURL=chunk-E2TMSNCK.js.map
