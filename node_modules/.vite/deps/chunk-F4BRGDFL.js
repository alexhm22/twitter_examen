import {
  generateUniqueId
} from "./chunk-26L5GZ27.js";
import {
  FlattenedNodesObserver
} from "./chunk-LQ5QREVC.js";

// node_modules/@vaadin/component-base/src/slot-controller.js
var SlotController = class extends EventTarget {
  static generateId(slotName, host) {
    const prefix = slotName || "default";
    return `${prefix}-${host.localName}-${generateUniqueId()}`;
  }
  constructor(host, slotName, slotFactory, slotInitializer, useUniqueId) {
    super();
    this.host = host;
    this.slotName = slotName;
    this.slotFactory = slotFactory;
    this.slotInitializer = slotInitializer;
    if (useUniqueId) {
      this.defaultId = SlotController.generateId(slotName, host);
    }
  }
  hostConnected() {
    if (!this.initialized) {
      let node = this.getSlotChild();
      if (!node) {
        node = this.attachDefaultNode();
      } else {
        this.node = node;
        this.initCustomNode(node);
      }
      this.initNode(node);
      this.observe();
      this.initialized = true;
    }
  }
  attachDefaultNode() {
    const { host, slotName, slotFactory } = this;
    let node = this.defaultNode;
    if (!node && slotFactory) {
      node = slotFactory(host);
      if (node instanceof Element) {
        if (slotName !== "") {
          node.setAttribute("slot", slotName);
        }
        this.node = node;
        this.defaultNode = node;
      }
    }
    if (node) {
      host.appendChild(node);
    }
    return node;
  }
  getSlotChild() {
    const { slotName } = this;
    return Array.from(this.host.childNodes).find((node) => {
      return node.nodeType === Node.ELEMENT_NODE && node.slot === slotName || node.nodeType === Node.TEXT_NODE && node.textContent.trim() && slotName === "";
    });
  }
  initNode(node) {
    const { slotInitializer } = this;
    if (slotInitializer) {
      slotInitializer(this.host, node);
    }
  }
  initCustomNode(_node) {
  }
  teardownNode(_node) {
  }
  observe() {
    const { slotName } = this;
    const selector = slotName === "" ? "slot:not([name])" : `slot[name=${slotName}]`;
    const slot = this.host.shadowRoot.querySelector(selector);
    this.__slotObserver = new FlattenedNodesObserver(slot, (info) => {
      const current = this.node;
      const newNode = info.addedNodes.find((node) => node !== current);
      if (info.removedNodes.length) {
        info.removedNodes.forEach((node) => {
          this.teardownNode(node);
        });
      }
      if (newNode) {
        if (current && current.isConnected) {
          this.host.removeChild(current);
        }
        this.node = newNode;
        if (newNode !== this.defaultNode) {
          this.initCustomNode(newNode);
          this.initNode(newNode);
        }
      }
    });
  }
};

export {
  SlotController
};
/**
 * @license
 * Copyright (c) 2021 - 2022 Vaadin Ltd.
 * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
 */
//# sourceMappingURL=chunk-F4BRGDFL.js.map
