import {
  Scroller
} from "./chunk-VEYZN5J7.js";
import {
  OverflowController
} from "./chunk-STJ6JQZU.js";
import {
  Tabs
} from "./chunk-GI3H235V.js";
import "./chunk-F56M43YO.js";
import {
  loader
} from "./chunk-CW2L4ERZ.js";
import "./chunk-J7BODBZG.js";
import "./chunk-A2S6YWCV.js";
import "./chunk-HU4W4T5Z.js";
import "./chunk-E2TMSNCK.js";
import {
  DelegateStateMixin
} from "./chunk-LU3TFTVZ.js";
import "./chunk-IOVQFHDT.js";
import "./chunk-IWC67P3I.js";
import "./chunk-KXXAFB6L.js";
import "./chunk-ZXFVDR5S.js";
import "./chunk-Q67J475U.js";
import "./chunk-LJ4MV4IY.js";
import "./chunk-VJGDHWCK.js";
import "./chunk-L374UGML.js";
import {
  SlotController
} from "./chunk-F4BRGDFL.js";
import {
  generateUniqueId
} from "./chunk-26L5GZ27.js";
import "./chunk-GA4D3JZK.js";
import {
  ElementMixin
} from "./chunk-35PYPRLR.js";
import "./chunk-WB77GQTL.js";
import "./chunk-LSFWBQOV.js";
import "./chunk-UMO66KPY.js";
import "./chunk-EF42WAVP.js";
import "./chunk-OFT7WUTJ.js";
import {
  ControllerMixin
} from "./chunk-YELGMEWD.js";
import {
  ThemableMixin,
  registerStyles
} from "./chunk-VCK5WHZR.js";
import "./chunk-RTIK5DCO.js";
import "./chunk-VUWTYCVF.js";
import {
  css
} from "./chunk-KW5WBOXY.js";
import "./chunk-L65BUNLZ.js";
import "./chunk-CQH3N2QY.js";
import "./chunk-UMTV3SEQ.js";
import {
  FlattenedNodesObserver
} from "./chunk-LQ5QREVC.js";
import {
  PolymerElement
} from "./chunk-BK2NTPF4.js";
import "./chunk-A5QYNKPK.js";
import "./chunk-ZNZEAP57.js";
import "./chunk-54PPSA5Z.js";
import {
  html
} from "./chunk-BPZOCPE6.js";
import "./chunk-CJPRR7ZF.js";

// node_modules/@vaadin/tabsheet/theme/lumo/vaadin-tabsheet-styles.js
var tabsheet = css`
  :host {
    font-size: var(--lumo-font-size-m);
    line-height: var(--lumo-line-height-m);
    font-family: var(--lumo-font-family);
  }

  :host([theme~='bordered']) {
    border: 1px solid var(--lumo-contrast-20pct);
    border-radius: var(--lumo-border-radius-l);
  }

  [part='tabs-container'] {
    box-shadow: inset 0 -1px 0 0 var(--lumo-contrast-10pct);
    padding: var(--lumo-space-xs) var(--lumo-space-s);
    gap: var(--lumo-space-s);
  }

  ::slotted([slot='tabs']) {
    box-shadow: initial;
    margin: calc(var(--lumo-space-xs) * -1) calc(var(--lumo-space-s) * -1);
  }

  [part='content'] {
    padding: var(--lumo-space-s) var(--lumo-space-m);
    border-bottom-left-radius: inherit;
    border-bottom-right-radius: inherit;
  }

  :host([loading]) [part='content'] {
    display: flex;
    align-items: center;
    justify-content: center;
  }
`;
registerStyles("vaadin-tabsheet", [tabsheet, loader], { moduleId: "lumo-tabsheet" });

// node_modules/@vaadin/tabsheet/src/vaadin-tabsheet-scroller.js
var TabsheetScroller = class extends Scroller {
  static get is() {
    return "vaadin-tabsheet-scroller";
  }
};
customElements.define(TabsheetScroller.is, TabsheetScroller);

// node_modules/@vaadin/tabsheet/src/vaadin-tabsheet.js
var TabsSlotController = class extends SlotController {
  constructor(host) {
    super(host, "tabs");
    this.__tabsItemsChangedListener = this.__tabsItemsChangedListener.bind(this);
    this.__tabsSelectedChangedListener = this.__tabsSelectedChangedListener.bind(this);
  }
  __tabsItemsChangedListener() {
    this.host._setItems(this.tabs.items);
  }
  __tabsSelectedChangedListener() {
    this.host.selected = this.tabs.selected;
  }
  initCustomNode(tabs) {
    if (!(tabs instanceof Tabs)) {
      throw Error('The "tabs" slot of a <vaadin-tabsheet> must only contain a <vaadin-tabs> element!');
    }
    this.tabs = tabs;
    tabs.addEventListener("items-changed", this.__tabsItemsChangedListener);
    tabs.addEventListener("selected-changed", this.__tabsSelectedChangedListener);
    this.host.__tabs = tabs;
    this.host.stateTarget = tabs;
    this.__tabsItemsChangedListener();
  }
  teardownNode(tabs) {
    this.tabs = null;
    tabs.removeEventListener("items-changed", this.__tabsItemsChangedListener);
    tabs.removeEventListener("selected-changed", this.__tabsSelectedChangedListener);
    this.host.__tabs = null;
    this.host._setItems([]);
    this.host.stateTarget = void 0;
  }
};
var TabSheet = class extends ControllerMixin(DelegateStateMixin(ElementMixin(ThemableMixin(PolymerElement)))) {
  static get template() {
    return html`
      <style>
        :host([hidden]) {
          display: none !important;
        }

        :host {
          display: flex;
          flex-direction: column;
        }

        [part='tabs-container'] {
          position: relative;
          display: flex;
          align-items: center;
        }

        ::slotted([slot='tabs']) {
          flex: 1;
          align-self: stretch;
          min-width: 8em;
        }

        [part='content'] {
          position: relative;
          flex: 1;
          box-sizing: border-box;
        }
      </style>

      <div part="tabs-container">
        <slot name="prefix"></slot>
        <slot name="tabs"></slot>
        <slot name="suffix"></slot>
      </div>

      <vaadin-tabsheet-scroller part="content">
        <div part="loader"></div>
        <slot id="panel-slot"></slot>
      </vaadin-tabsheet-scroller>
    `;
  }
  static get is() {
    return "vaadin-tabsheet";
  }
  static get properties() {
    return {
      items: {
        type: Array,
        readOnly: true,
        notify: true
      },
      selected: {
        value: 0,
        type: Number,
        notify: true
      },
      __tabs: {
        type: Object
      },
      __panels: {
        type: Array
      }
    };
  }
  static get delegateProps() {
    return ["selected"];
  }
  static get delegateAttrs() {
    return ["theme"];
  }
  ready() {
    super.ready();
    this.__overflowController = new OverflowController(this, this.shadowRoot.querySelector('[part="content"]'));
    this.addController(this.__overflowController);
    this._tabsSlotController = new TabsSlotController(this);
    this.addController(this._tabsSlotController);
    const panelSlot = this.shadowRoot.querySelector("#panel-slot");
    this.__panelsObserver = new FlattenedNodesObserver(panelSlot, () => {
      this.__panels = Array.from(panelSlot.assignedNodes({ flatten: true })).filter(
        (node) => node.nodeType === Node.ELEMENT_NODE
      );
    });
  }
  static get observers() {
    return ["__itemsOrPanelsChanged(items, __panels)", "__selectedTabItemChanged(selected, items, __panels)"];
  }
  __itemsOrPanelsChanged(items, panels) {
    if (!items || !panels) {
      return;
    }
    items.forEach((tabItem) => {
      const panel = panels.find((panel2) => panel2.getAttribute("tab") === tabItem.id);
      if (panel) {
        panel.role = "tabpanel";
        panel.id = panel.id || `tabsheet-panel-${generateUniqueId()}`;
        panel.setAttribute("aria-labelledby", tabItem.id);
        tabItem.setAttribute("aria-controls", panel.id);
      }
    });
  }
  __selectedTabItemChanged(selected, items, panels) {
    if (!items || !panels || selected === void 0) {
      return;
    }
    const content = this.shadowRoot.querySelector('[part="content"]');
    const selectedTab = items[selected];
    const selectedTabId = selectedTab ? selectedTab.id : "";
    const selectedPanel = panels.find((panel) => panel.getAttribute("tab") === selectedTabId);
    this.toggleAttribute("loading", !selectedPanel);
    const hasOneVisiblePanel = panels.filter((panel) => !panel.hidden).length === 1;
    if (selectedPanel) {
      content.style.minHeight = "";
    } else if (hasOneVisiblePanel) {
      content.style.minHeight = `${content.offsetHeight}px`;
    }
    panels.forEach((panel) => {
      panel.hidden = panel !== selectedPanel;
    });
  }
};
customElements.define(TabSheet.is, TabSheet);
/**
 * @license
 * Copyright (c) 2022 Vaadin Ltd.
 * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
 */
//# sourceMappingURL=@vaadin_tabsheet_theme_lumo_vaadin-tabsheet__js.js.map
